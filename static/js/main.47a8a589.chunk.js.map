{"version":3,"sources":["ContentEditable.tsx","ColumnsControl.tsx","config.ts","ViewColumns.tsx","ViewInput.tsx","mock.ts","index.tsx","App.tsx"],"names":["ContentEditable","index","text","onChange","emitChange","useCallback","currentTarget","innerText","onInput","contentEditable","suppressContentEditableWarning","ColumnsControl","handleClick","columns","Number","dataset","Array","from","length","_b","i","key","onClick","data-columns","ViewColumns","useState","actualText","setActualText","cacheText","setCacheText","columnsAmount","setColumnsAmount","texts","useMemo","quotient","Math","round","_c","lastIndex","lastIndexOf","columnText","substring","divideTextByColumns","handleChangeText","newText","result","join","className","map","ViewInput","onSubmit","setText","handleTextChange","value","handleLayoutClick","handleLoremClick","ReactDOM","render","view","setView","views","input","document","getElementById"],"mappings":"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","file":"static/js/main.47a8a589.chunk.js","sourcesContent":["import React, { FC, FormEvent, useCallback } from 'react';\n\ntype Props = {\n  text: string;\n  index: number;\n  onChange: (text: string, index: number) => void;\n};\n\nexport const ContentEditable: FC<Props> = ({ index, text, onChange }) => {\n  const emitChange = useCallback(\n    ({ currentTarget }: FormEvent<HTMLParagraphElement>) => {\n      onChange(currentTarget.innerText, index);\n    },\n    [index, onChange],\n  );\n\n  return (\n    <p onInput={emitChange} contentEditable suppressContentEditableWarning>\n      {text}\n    </p>\n  );\n};\n","import React, { FC, FormEvent, useCallback } from 'react';\nimport { MAX_NUMBER_OF_COLUMNS } from './config';\n\ntype Props = {\n  onChange: (columns: number) => void;\n};\n\nexport const ColumnsControl: FC<Props> = ({ onChange }) => {\n  const handleClick = useCallback(\n    ({ currentTarget }: FormEvent<HTMLButtonElement>) => {\n      const columns = Number(currentTarget.dataset.columns);\n      onChange(columns);\n    },\n    [onChange],\n  );\n  return (\n    <>\n      {Array.from({ length: MAX_NUMBER_OF_COLUMNS }, (_b, i) => {\n        const key = i + 1;\n        return (\n          <button key={key} onClick={handleClick} data-columns={key}>\n            {key} column{i > 0 && 's'}\n          </button>\n        );\n      })}\n    </>\n  );\n};\n","export const INITIAL_NUMBER_OF_COLUMNS = 1;\nexport const MAX_NUMBER_OF_COLUMNS = 3;\n","import React, { FC, useState, useMemo } from 'react';\nimport './ViewColumns.css';\nimport { ContentEditable } from './ContentEditable';\nimport { ColumnsControl } from './ColumnsControl';\nimport { INITIAL_NUMBER_OF_COLUMNS } from './config';\n\ntype Props = {\n  text: string;\n};\n\nconst divideTextByColumns = (text: string, columnsAmount: number) => {\n  const quotient = Math.round(text.length / columnsAmount);\n  return Array.from({ length: columnsAmount }, (_c, index) => {\n    if (index + 1 === columnsAmount) {\n      return text;\n    }\n    const lastIndex = text.lastIndexOf(' ', quotient);\n    const columnText = text.substring(0, lastIndex);\n    text = text.substring(lastIndex + 1);\n    return columnText;\n  });\n};\n\nexport const ViewColumns: FC<Props> = ({ text }) => {\n  const [actualText, setActualText] = useState(text);\n  const [cacheText, setCacheText] = useState(text);\n  const [columnsAmount, setColumnsAmount] = useState(INITIAL_NUMBER_OF_COLUMNS);\n  const texts = useMemo(() => divideTextByColumns(actualText, columnsAmount), [\n    actualText,\n    columnsAmount,\n  ]);\n\n  const handleChangeText = (newText: string, index: number) => {\n    const result = [...texts];\n    result[index] = newText;\n    setCacheText(result.join(' '));\n  };\n\n  const handleColumnsClick = (columnsAmount: number) => {\n    setActualText(cacheText);\n    setColumnsAmount(columnsAmount);\n  };\n\n  return (\n    <div className=\"ViewColumns\">\n      <ColumnsControl onChange={handleColumnsClick} />\n      <div className=\"ViewColumns__columns\">\n        {texts.map((text, index) => (\n          <ContentEditable\n            key={text.substring(0, 10)}\n            index={index}\n            text={text}\n            onChange={handleChangeText}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { FC, FormEvent, useCallback, useState } from 'react';\nimport './ViewInput.css';\nimport { text as loremText } from './mock';\n\ntype Props = {\n  onSubmit: (text: string) => void;\n};\n\nexport const ViewInput: FC<Props> = ({ onSubmit }) => {\n  const [text, setText] = useState('');\n\n  const handleTextChange = useCallback(\n    ({ currentTarget }: FormEvent<HTMLTextAreaElement>) => {\n      setText(currentTarget.value);\n    },\n    [],\n  );\n\n  const handleLayoutClick = useCallback(() => {\n    onSubmit(text);\n  }, [onSubmit, text]);\n\n  const handleLoremClick = useCallback(() => {\n    setText(loremText);\n  }, []);\n\n  return (\n    <div className=\"ViewInput\">\n      <div>\n        <button onClick={handleLoremClick}>Lorem</button>\n        <button onClick={handleLayoutClick}>Layout</button>\n      </div>\n      <textarea onChange={handleTextChange} value={text} />\n    </div>\n  );\n};\n","export const text = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec erat nec ligula sollicitudin sollicitudin sit amet nec urna. Nulla tincidunt libero nec est ullamcorper fringilla. In a ullamcorper turpis, maximus posuere mauris. Nulla tempus turpis nec felis pellentesque ultrices. Quisque nec est urna. Vestibulum pharetra, justo at ultrices faucibus, augue massa vestibulum nulla, at auctor ex mi iaculis eros. Proin at mi ut nulla luctus fringilla. Donec porttitor massa placerat tortor accumsan mattis. Praesent id interdum erat. Nullam tristique enim sapien, quis semper tellus imperdiet quis. Nunc iaculis leo quis mauris lacinia, id eleifend orci viverra.\nUt at blandit magna. Phasellus condimentum, ex eget congue tincidunt, mi ipsum tempus magna, ut porttitor ipsum quam sit amet lorem. Suspendisse eget hendrerit ligula. Proin id interdum mauris, nec ultrices risus. Fusce posuere nisl sed massa euismod tempus. Nunc a feugiat nibh. Praesent ut dictum est. Aliquam mollis, ante vitae pulvinar facilisis, nisl lacus pretium ipsum, sit amet varius ante quam sed magna. Nunc pulvinar mi sit amet lacinia viverra. Nunc rutrum odio justo, vel varius tortor ornare non. Nam rhoncus porttitor egestas. Pellentesque metus nulla, sollicitudin eu massa sit amet, dignissim faucibus nunc. Vestibulum mi quam, mattis ut eleifend sit amet, sagittis a mauris.\nPhasellus in vulputate ipsum. Vestibulum tempor, massa a luctus imperdiet, orci eros accumsan urna, at rutrum lorem elit a ante. Pellentesque vehicula imperdiet libero, sit amet posuere sapien volutpat non. Aliquam erat volutpat. Proin dignissim orci nec odio suscipit, eget tincidunt velit commodo. Nulla eget ex quis tortor scelerisque ultrices. Maecenas consequat blandit lorem, non tempor lacus. Duis lorem ante, egestas id purus posuere, rhoncus condimentum ante. Nullam vestibulum, magna vitae lobortis laoreet, felis elit efficitur mi, sit amet volutpat lectus felis ac urna.\nIn hac habitasse platea dictumst. Etiam iaculis mi felis, sit amet accumsan ex efficitur nec. Duis consequat ipsum vel vulputate vestibulum. Cras sem magna, viverra in dapibus sed, dictum id tellus. Morbi eros turpis, congue a dictum ultricies, viverra a nisl. Praesent gravida sagittis fringilla. Morbi luctus justo vitae posuere posuere. In egestas faucibus odio.\nDonec consequat quam molestie, tristique quam a, fringilla dui. Nullam faucibus, neque ac vestibulum dignissim, orci diam iaculis ligula, quis lobortis arcu enim nec felis. Quisque efficitur nunc orci, ut sodales diam blandit eu. Maecenas egestas leo purus, et euismod lectus lobortis eget. Suspendisse pellentesque sem purus, ac luctus risus auctor in. Duis volutpat mollis nulla a placerat. Aenean fermentum consequat diam, non egestas massa cursus quis. Maecenas fermentum euismod lectus sit amet tincidunt. Nam aliquam mattis orci, non mollis mauris porttitor ut. Sed rutrum eros sed mauris rhoncus, vel tempus lectus tempor. Mauris pharetra, lectus vel iaculis consectetur, purus mi feugiat dolor, eget congue ante mi nec sem. Etiam faucibus tempus hendrerit. Cras sit amet magna eu massa feugiat tincidunt. Etiam dapibus volutpat diam, eget varius felis. Sed a lorem id dolor ultricies condimentum sed eget massa.\nUt lobortis id libero at consequat. Suspendisse iaculis, nisl sed placerat sollicitudin, tellus quam consequat ipsum, id sagittis augue justo at tellus. Ut eget magna purus. Donec nec velit quis lacus finibus tristique. Nulla lacinia ultrices venenatis. Morbi nec rhoncus libero. Sed in ultricies augue. Phasellus mollis risus ut lobortis feugiat. Curabitur risus sem, vehicula eu metus vel, imperdiet pretium metus. Phasellus lacinia luctus nunc ut posuere. Mauris eu congue leo, quis ornare nunc.\nClass aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque suscipit tempus augue eget sodales. In imperdiet dui non nisl convallis, at cursus libero molestie. Aenean ultricies ornare orci, ut suscipit nulla venenatis sit amet. Quisque dignissim sapien non blandit sodales. Maecenas ullamcorper ipsum eget facilisis laoreet. Proin libero ante, aliquam id cursus vitae, condimentum ut ligula. Aliquam metus turpis, vulputate non molestie sit amet, consectetur quis neque. Morbi odio ligula, pharetra vitae rutrum at, bibendum sit amet tellus. Morbi vulputate metus quam, nec interdum sapien tristique eu. Donec luctus quam ante, eget posuere ipsum gravida sed.`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { FC, useState } from 'react';\nimport './App.css';\nimport { ViewColumns } from './ViewColumns';\nimport { ViewInput } from './ViewInput';\n\ntype View = 'input' | 'columns';\n\nexport const App: FC = () => {\n  const [view, setView] = useState<View>('input');\n  const [text, setText] = useState('');\n\n  const handleSubmit = (text: string) => {\n    setText(text);\n    setView('columns');\n  };\n\n  const views: { [key in View]: JSX.Element } = {\n    input: <ViewInput onSubmit={handleSubmit} />,\n    columns: <ViewColumns text={text} />,\n  };\n\n  return <div className=\"App\">{views[view]}</div>;\n};\n"],"sourceRoot":""}